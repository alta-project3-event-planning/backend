openapi: "3.0.2"
info: # Belum ditentukan data info dan servers
  title: Events App
  description: description Events App
  termsOfService: https://academy.alterra.id
  contact:
    name: API Support
    url: https://www.alterra.id/support
    email: support@alterra.id
  license:
    name: Apache 2.0
    url: https://www.apache.org/licenses/LICENSE-2.0.html
  version: "1.0"
externalDocs:
  description: alterra external docs API
  url: https://alterra.id
servers:
  - description: SwaggerHub API Auto Mocking
    url: https://virtserver.swaggerhub.com/fazamttqn/EventsApp/1.0.0
  - url: https://{environment}.api.alterra.id/v1
    description: ALTA API server
    variables:
      environment:
        default: dev
        enum:
          - dev
          - staging
          - production
  - url: http://13.215.249.83:80
    description: ALTA API server
tags:
  - name: Login
    description: User Authentication
  - name: Register
    description: Register User
  - name: User
    description: User data management
  - name: Event
    description: Event data management
  - name: Participation
    description: Participation data management
paths:
  ###########################
  #          LOGIN          #
  ###########################
  /login:
    post:
      tags:
        - Login
      summary: login user
      description: Login user description
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#component/schemas/requestLogin"
            examples:
              userData:
                description: "Data user"
                value: { email: "alta@alterra.id", password: "inipassword" }
      responses:
        "200":
          description: "Login Success"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/responseLoginSuccess"
              examples:
                responseData:
                  description: response success
                  value:
                    {
                      code: 200,
                      message: "Login Success",
                      data:
                        {
                          id: 1,
                          token: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJhdXRob3JpemVkIjp0cnVlLCJleHAiOjE2MzgzMjYxODAsInVzZXJJZCI6MSwidXNlcm5hbWUiOiJhZG1pbiJ9.AebFR-oQjUSOMez2ucDWkiMrS2eQIPmcYm5c71qZ_co",
                        },
                    }
        "400":
          description: "Login Failed"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/failedResponseLogin"
              examples:
                responseData:
                  description: response failed
                  value:
                    { code: 400, message: "Login Failed" }
  ##############################
  #          REGISTER          #
  ##############################
  /register:
    post:
      tags:
        - Register
      summary: Register user
      description: Register user description
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#component/schemas/requestRegister"
            examples:
              userData:
                description: "Data user"
                value:
                  {
                    name: Budi Setiawan,
                    email: budi@gmail.com,
                    password: inibudi,
                  }
      responses:
        "200":
          description: "Register Success"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/responseRegisterSuccess"
              examples:
                responseData:
                  description: response success
                  value:
                    {
                      code: 200,
                      message: "Register Success",
                    }
        "400":
          description: "Register Failed"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/failedResponseRegister"
              examples:
                responseData:
                  description: response failed
                  value:
                    {
                      code: 400,
                      message: "All input data must be filled",
                    }
  ##########################
  #          USER          #
  ##########################
  /users:
    get:
      tags:
        - User
      summary: profile user
      description: Profile user description
      responses:
        "200":
          description: "Get Profile Success"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/responseWithData"
              examples:
                responseData:
                  description: response success
                  value:
                    {
                      code: 200,
                      message: "Success get your data",
                      data:
                        {
                          ID: 1,
                          avatar: URL File,
                          name: budi,
                          email: budi@gmail.com,
                        },
                    }
        "400":
          description: "Failed Get Profile"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/failedResponse"
              examples:
                responseData:
                  description: response failed
                  value: { code: 400, message: "Failed to get your data" }
  /users/{id}:
    put:
      tags:
        - User
      summary: update user
      description: Updated user description
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#component/schemas/requestUpdateUser"
            examples:
              userData:
                description: "Data user"
                value:
                  {
                    name: Angga pramaja,
                    email: angga@gmail.com,
                    password: ituangga,
                  }
      responses:
        "200":
          description: "Update Success"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/responseWithNoData"
              examples:
                responseData:
                  description: response success
                  value: { code: 200, message: "Updated Success" }
        "400":
          description: "Failed Updated"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/failedResponse"
              examples:
                responseData:
                  description: response failed
                  value: { code: 400, message: "Failed Updated" }
    delete:
      tags:
        - User
      summary: delete user
      description: Delete user description
      responses:
        "200":
          description: Delete Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/responseWithNoData"
              examples:
                responseData:
                  description: response success
                  value: { code: 200, message: "Delete Success" }
        "400":
          description: Failed Deleted
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/failedResponse"
              examples:
                responseData:
                  description: response failed
                  value: { code: 400, message: "Failed deleted" }
  ############################
  #          EVENTS          #
  ############################
  /events:
    post:
      tags:
        - Event
      summary: create events
      description: Create events description
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#component/schemas/requestEvent"
            examples:
              eventData:
                description: "Create event description by user"
                value:
                  {
                    photo_events: URL,
                    name: Webinar Pendidikan,
                    hosted_by: Company Surya Kencana,
                    date: 20-07-2022,
                    city: Jakarta,
                    location: (longitude and latitude),
                    details: Ini adalah description webinar bertema pendidikan,
                  }
      responses:
        "200":
          description: "Success to create event"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/responseWithNoData"
              examples:
                responseData:
                  description: response success
                  value:
                    {
                      code: 200,
                      message: "Success insert event",
                    }
        "400":
          description: "Failed to create event"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/failedResponse"
              examples:
                responseData:
                  description: response failed
                  value:
                    {
                      code: 400,
                      message: "Failed insert event",
                    }
    get:
      tags:
        - Event
      summary: get all events
      description: Home description
      responses:
        "200":
          description: "Get all events success"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/responseEvent"
              examples:
                responseHome:
                  description: response home success
                  value:
                    {
                      code: 200,
                      message: "Success get all events",
                      data:
                        [
                          {
                            photo_events: URL,
                            name: Webinar Pendidikan,
                            hosted_by: Company Surya Kencana,
                            date: 20-07-2022,
                            city: Jakarta,
                            location: (longitude and latitude),
                            details: Ini adalah description webinar bertema pendidikan,
                          },
                        ],
                    }
        "400":
          description: "Failed to get all events"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/failedResponse"
              examples:
                responseData:
                  description: response home failed
                  value:
                    {
                      code: 400,
                      message: "Failed get all events",
                    }
  /events/{id_event}:
    get:
      tags:
        - Event
      summary: get event
      description: Show one event
      responses:
        "200":
          description: "Get events success"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/responseWithData"
              examples:
                responseData:
                  description: response event success
                  value:
                    {
                      code: 200,
                      message: "Success get event",
                      data:
                        {
                          photo_events: URL,
                          name: Webinar Pendidikan,
                          hosted_by: Company Surya Kencana,
                          date: 20-07-2022,
                          city: Jakarta,
                          location: (longitude and latitude),
                          details: Ini adalah description webinar bertema pendidikan,
                          participant: [
                            "Budi", "Angga"
                          ],
                        },
                    }
        "400":
          description: "Failed to get events"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/failedResponse"
              examples:
                responseData:
                  description: response event failed
                  value:
                    {
                      code: 400,
                      message: "Failed to get event",
                    }
    put:
      tags:
        - Event
      summary: update event
      description: Updated event description
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#component/schemas/requestEvent"
            examples:
              eventData:
                description: "Update event Description by user"
                value:
                  {
                    photo_events: URL,
                    name: Webinar Pendidikan,
                    hosted_by: Company Surya Kencana,
                    date: 20-07-2022,
                    city: Jakarta,
                    location: (longitude and latitude),
                    details: Ini adalah description webinar bertema pendidikan,
                  }
      responses:
        "200":
          description: "Update Success"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/responseWithNoData"
              examples:
                responseData:
                  description: response success
                  value: { code: 200, message: "Success update event" }
        "400":
          description: "Failed Updated"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/failedResponse"
              examples:
                responseData:
                  description: response failed
                  value: { code: 400, message: "Failed update event" }
    delete:
      tags:
        - Event
      summary: delete event
      description: Delete event description
      responses:
        "200":
          description: Delete Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/responseWithNoData"
              examples:
                responseData:
                  description: response success
                  value:
                    {
                      code: 200,
                      message: "Delete event success",
                    }
        "400":
          description: Failed Deleted
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/failedResponse"
              examples:
                responseData:
                  description: response failed
                  value:
                    {
                      code: 400,
                      message: "Failed event deleted",
                    }

  ###################################
  #          PARTICIPATION          #
  ###################################
  /events/participations:
    # Join event yang akan diikuti oleh user
    post:
      tags:
        - Participation
      summary: join event
      description: Join event description
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#component/schemas/requestJoin"
            examples:
              joinData:
                description: "Data join"
                value: { id_event: 2 }
      responses:
        "200":
          description: "Join Success"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/responseWithNoData"
              examples:
                responseData:
                  description: response success
                  value:
                    {
                      code: 200,
                      message: "Success insert event participation",
                    }
        "400":
          description: "Failed Join"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/failedResponse"
              examples:
                responseData:
                  description: response failed
                  value:
                    {
                      code: 400,
                      message: "Failed insert event participation",
                    }
    # Mengambil data event yang diikuti oleh user
    get:
      tags:
        - Participation
      summary: get all event by participation
      description: Participation Event description
      responses:
        "200":
          description: "Get all events participation success"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/responseEvent"
              examples:
                responseJoin:
                  description: response event participation success
                  value:
                    {
                      code: 200,
                      message: "Success get all your events",
                      data:
                        [
                          {
                            photo_events: URL,
                            name: Webinar Pendidikan,
                            hosted_by: Company Surya Kencana,
                            date: 20-07-2022,
                            city: Jakarta,
                            location: (longitude and latitude),
                            details: Ini adalah description webinar bertema pendidikan,
                          },
                        ],
                    }
        "400":
          description: "Failed to get all events"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/failedResponse"
              examples:
                responseJoin:
                  description: failed response event participation success
                  value:
                    {
                      code: 400,
                      message: "Failed get all your events",
                    }
  #############################
  #          COMMENT          #
  #############################
  # Comment yang dibuat oleh user
  /events/comments:
    post:
      tags:
        - Participation
      summary: comment event
      description: Create comment event description
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#component/schemas/requesCreateComment"
            examples:
              commentData:
                description: "Data comment"
                value:
                  {
                    id_event: 2,
                    id_user: 24,
                    comment: Ini spesifik alamat eventnya dimana gimana ya kak?,
                  }
      responses:
        "200":
          description: "Comment Success"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/responseWithNoData"
              examples:
                responseData:
                  description: response comment success
                  value:
                    {
                      code: 200,
                      message: "Success insert your comment",
                    }
        "400":
          description: "Failed Comment"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/failedResponse"
              examples:
                responseData:
                  description: failed response comment
                  value:
                    {
                      code: 400,
                      message: "Failed insert your comment",
                    }
  # Mengambil semua data comment yang terkait dengan event
  /events/comments/{id_event}:
    get:
      tags:
        - Participation
      summary: get all comment event
      description: Comment event description
      responses:
        "200":
          description: "Get all comment events success"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/responseComment"
              examples:
                responseComment:
                  description: response comment event success
                  value:
                    {
                      code: 200,
                      message: "Success get all comment events",
                      data:
                        [
                          {
                            name: Angga,
                            comment: Ini spesifik alamat eventnya dimana gimana ya kak?,
                          },
                        ],
                    }
        "400":
          description: "Failed to get all comment events"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/failedResponse"
              examples:
                responseComment:
                  description: failed response comment event success
                  value:
                    {
                      code: 400,
                      message: "Failed get all comment events",
                    }

components:
  schemas:
    # Login
    requestLogin:
      type: object
      properties:
        "email":
          type: string
          minLength: 1
        "password":
          type: string
          minLength: 1

    responseLoginSuccess:
      type: object
      properties:
        {
          "code": { type: number },
          "message": { type: string },
          "status": { type: string },
          "data": { type: object },
        }
    failedResponseLogin:
      type: object
      properties:
        {
          "code": { type: number },
          "message": { type: string },
          "status": { type: string },
        }
    # Register
    requestRegister:
      type: object
      properties:
        "name":
          type: string
          minLength: 1
        "email":
          type: string
          minLength: 1
        "password":
          type: string
          minLength: 1
    responseRegisterSuccess:
      type: object
      properties:
        {
          "code": { type: number },
          "message": { type: string },
          "status": { type: string },
        }
    failedResponseRegister:
      type: object
      properties:
        {
          "code": { type: number },
          "message": { type: string },
          "status": { type: string },
        }
    # User
    # Get User
    responseWithData:
      type: object
      properties:
        {
          "code": { type: number },
          "message": { type: string },
          "data": { type: object },
        }
    # Update User
    requestUpdateUser:
      type: object
      properties:
        "name":
          type: string
          minLength: 1
        "email":
          type: string
          minLength: 1
        "password":
          type: string
          minLength: 1

    # Insert and Update Event
    requestEvent:
      type: object
      properties:
        "photo_events":
          type: string
        "name":
          type: string
          minLength: 1
        "hosted_by":
          type: string
          minLength: 1
        "date":
          type: string
        "city":
          type: string
        "location":
          type: string
        "details":
          type: string
          minLength: 1

    # Get All Event
    responseEvent:
      type: object
      properties:
        {
          "code": { type: number },
          "message": { type: string },
          "data": { type: array},
        }

    # Join Participant
    requestJoin:
      type: object
      properties:
        "id":
          type: number


    # For all features
    responseWithNoData:
      type: object
      properties: { "code": { type: number }, "message": { type: string } }
    failedResponse:
      type: object
      properties: { "code": { type: number }, "message": { type: string } }

    # Create Comment
    requesCreateComment:
      type: object
      properties:
        "id_event":
          type: number
          minLength: 1
        "id_user":
          type: number
          minLength: 1
        "comment":
          type: string

    responseComment:
      type: object
      properties:
        "name":
          type: string
        "comment":
          type: string